"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var ViewportScrollSensor_1 = require("../ViewportScrollSensor");
var h = React.createElement;
var defaultSentinel = h('div', { style: { width: 1, height: 1 } });
var InfiniteScroll = (function (_super) {
    tslib_1.__extends(InfiniteScroll, _super);
    function InfiniteScroll() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.sentinelVisible = false;
        _this.lastLoadMoreCursor = null;
        _this.mounted = true;
        _this.onViewportChange = function (_a) {
            var visible = _a.visible;
            _this.sentinelVisible = !!visible;
            if (visible) {
                _this.loadMore();
                _this.startTimer();
            }
            else {
                _this.stopTimer();
            }
        };
        return _this;
    }
    InfiniteScroll.prototype.componentWillUnmount = function () {
        this.mounted = false;
        this.stopTimer();
    };
    InfiniteScroll.prototype.startTimer = function () {
        var _this = this;
        if (this.props.interval) {
            this.timer = setTimeout(function () {
                if (!_this.mounted)
                    return;
                if (!_this.props.hasMore)
                    return;
                if (!_this.sentinelVisible)
                    return;
                _this.loadMore();
                _this.startTimer();
            }, this.props.interval);
        }
    };
    InfiniteScroll.prototype.stopTimer = function () {
        clearTimeout(this.timer);
    };
    InfiniteScroll.prototype.loadMore = function () {
        if (this.lastLoadMoreCursor !== this.props.cursor) {
            this.lastLoadMoreCursor = this.props.cursor;
            this.props.loadMore();
        }
    };
    InfiniteScroll.prototype.render = function () {
        var props = this.props;
        var children = props.children, hasMore = props.hasMore, sentinel = props.sentinel, margin = props.margin, interval = props.interval;
        return h(React.Fragment, null, children, hasMore &&
            h(ViewportScrollSensor_1.ViewportScrollSensor, { margin: [0, 0, margin, 0], poll: interval, onChange: this.onViewportChange }, sentinel));
    };
    InfiniteScroll.defaultProps = {
        interval: 1e3,
        sentinel: defaultSentinel,
        hasMore: true,
        margin: 100,
    };
    return InfiniteScroll;
}(React.Component));
exports.InfiniteScroll = InfiniteScroll;
//# sourceMappingURL=index.js.map